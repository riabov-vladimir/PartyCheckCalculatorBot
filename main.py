import sqlite3
import itertools
import telebot
from telebot import types

import secret
from faq_text import faq_text

# telegram bot token
bot_token = secret.BOT_TOKEN
bot = telebot.TeleBot(token=bot_token)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


# db migrations
def init_db():
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS expenses (
                                                            expense_id INTEGER PRIMARY KEY AUTOINCREMENT, 
                                                            chat_id INTEGER NOT NULL, 
                                                            user_id INTEGER NOT NULL,
                                                            username TEXT, 
                                                            amount REAL NOT NULL, 
                                                            description TEXT NOT NULL,
                                                            exclude INTEGER DEFAULT 0 NOT NULL,
                                                            CHECK(exclude IN (0, 1)))''')
    conn.commit()
    conn.close()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("üçª –Ø –≤ –¥–µ–ª–µ!", callback_data='participate')
    markup.add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    bot.send_message(message.chat.id, '–ó–¥—Ä–∞—Å—å—Ç–µ! –Ø –ø—Ä–∏—à–µ–ª –ø–æ–º–æ—á—å –≤–∞–º —Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–µ–π.\n–ö—Ç–æ –±—É–¥–µ—Ç '
                                      '—Å–∫–∏–¥—ã–≤–∞—Ç—å—Å—è - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∂–º–∏—Ç–µ "üçª –Ø –≤ –¥–µ–ª–µ!" –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ª–∏–±–æ –≤ –º–µ–Ω—é –±–æ—Ç–∞!', reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'participate')
def inline_participate(call):
    username = call.from_user.username
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO expenses (chat_id, user_id, username, amount, description) VALUES (?, ?, ?, ?, ?)",
                   (call.message.chat.id, call.from_user.id, call.from_user.username, 0, f'{call.from_user.username} added via callback'))
    conn.commit()
    conn.close()
    # bot.send_message(message.chat.id, f'@{username}, –ø–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª!')
    bot.send_message(call.message.chat.id, f'@{username}, –ø–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª!')


@bot.message_handler(commands=['participate'])
def participate(message):
    username = message.from_user.username
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO expenses (chat_id, user_id, username, amount, description) VALUES (?, ?, ?, ?, ?)",
                   (message.chat.id, message.from_user.id, message.from_user.username, 0, f'{message.from_user.username} added'))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, f'@{username}, –ø–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª!')


@bot.message_handler(commands=['drop_expenses'])
def drop_expenses(message):
    username = message.from_user.username
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    cursor.execute("""
         SELECT
             SUM(amount) as total_amount
         FROM expenses
         WHERE chat_id = @chat_id
         """, (message.chat.id,))
    total_amount = cursor.fetchone()

    cursor.execute("""
         SELECT
             AVG(amount) as average_amount
         FROM expenses
         WHERE chat_id = @chat_id
         """, (message.chat.id,))
    average_amount = cursor.fetchone()

    text = (f'–ù—É —á—Ç–æ, –≤—Å–µ –∂–∏–≤—ã –∑–¥–æ—Ä–æ–≤—ã? –ù–∞–¥–µ—é—Å—å –≤—ã —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–ª–∏ –≤—Ä–µ–º—è)\n\n–ü–æ –∏—Ç–æ–≥—É –≥—É–ª—å–Ω—É–ª–∏ –Ω–∞ {round(total_amount[0])}‚ÇΩ, —ç—Ç–æ –ø–æ {round(average_amount[0])}‚ÇΩ —Å –Ω–æ—Å–∞.\n\n'
            f'–ò—Ç–æ–≥–æ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:\n\n')

    cursor.execute("""
        SELECT amount, username, description FROM expenses WHERE chat_id = @chat_id AND amount > 0
                        """, (message.chat.id, ))
    results = cursor.fetchall()

    i = 1
    for amount, username, description in results:
        text += f'{i}. {round(amount)}‚ÇΩ –æ—Ç @{username} ({description})\n\n'
        i += 1

    text += '\n\n–ù–∞ —ç—Ç–æ–º –∏–∑–≤–æ–ª—å—Ç–µ –æ—Ç–∫–ª–∞–Ω—è—Ç—å—Å—è! –í—Å–µ–º –ø–æ–∫–∞ –∏ –¥–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á üëã'

    cursor.execute("""
        DELETE FROM expenses WHERE chat_id = @chat_id
    """, (message.chat.id, ))
    conn.commit()
    conn.close()
    bot.send_message(message.chat.id, text)


@bot.message_handler(commands=['list_expenses'])
def participate(message):
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    cursor.execute("""
         SELECT
             SUM(amount) as total_amount
         FROM expenses
         WHERE chat_id = @chat_id
         """, (message.chat.id,))
    total_amount = cursor.fetchone()

    cursor.execute("""
         SELECT
             AVG(amount) as average_amount
         FROM expenses
         WHERE chat_id = @chat_id
         """, (message.chat.id,))
    average_amount = cursor.fetchone()

    text = (f'–ü–æ {round(average_amount[0])}‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞. –û–±—â–∞—è —Å—É–º–º–∞ - {round(total_amount[0])}‚ÇΩ\n\n'
            f'–°–ø–∏—Å–æ–∫ —Ä–∞—Ä—Å—Ö–æ–¥–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n')

    cursor.execute("""
        SELECT amount, username, description FROM expenses WHERE chat_id = @chat_id AND amount > 0
                        """, (message.chat.id, ))
    results = cursor.fetchall()

    i = 1
    for amount, username, description in results:
        text += f'{i}. {round(amount)}‚ÇΩ –æ—Ç @{username} ({description})\n\n'
        i += 1

    bot.send_message(message.chat.id, text)

    conn.close()

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, faq_text, parse_mode='MarkdownV2')


# –ö–æ–º–∞–Ω–¥–∞ /add_expense
@bot.message_handler(commands=['add_expense'])
def add_expense(message):
    user_id = message.from_user.id
    user_states[user_id] = 'waiting_for_amount'
    bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")


# –ö–æ–º–∞–Ω–¥–∞ /summary
@bot.message_handler(commands=['summary'])
def summary(message):
    chat_id = message.chat.id
    print(chat_id)
    conn = sqlite3.connect('expenses.db')
    cursor = conn.cursor()

    cursor.execute("""
        WITH TotalExpenses AS (
            SELECT 
                SUM(amount) AS total_amount
            FROM 
                expenses
            WHERE 
                chat_id = @chat_id
        ),
        UserExpenses AS (
            SELECT 
                username,
                SUM(amount) AS user_total
            FROM 
                expenses
            WHERE 
                chat_id = @chat_id
            GROUP BY 
                username
        ),
        UserBalances AS (
            SELECT 
                ue.username,
                ue.user_total,
                (te.total_amount / (SELECT COUNT(*) FROM UserExpenses)) AS share,
                (ue.user_total - (te.total_amount / (SELECT COUNT(*) FROM UserExpenses))) AS balance
            FROM 
                UserExpenses ue,
                TotalExpenses te
        ),
        Debtors AS (
            SELECT 
                username,
                ABS(balance) AS debt
            FROM 
                UserBalances
            WHERE 
                balance < 0
        ),
        Creditors AS (
            SELECT 
                username,
                user_total - (SELECT total_amount / (SELECT COUNT(*) FROM UserExpenses) FROM TotalExpenses) AS net_contribution
            FROM 
                UserBalances
            WHERE 
                balance > 0
        ),
        TotalDebt AS (
            SELECT 
                SUM(debt) AS total_debt
            FROM 
                Debtors
        )
        
        SELECT 
            d.username AS debtor,
            c.username AS creditor,
            (d.debt * (c.net_contribution / (SELECT SUM(net_contribution) FROM Creditors))) AS amount_to_pay
        FROM 
            Debtors d
        CROSS JOIN 
            Creditors c;
    """, (chat_id,))
    results = cursor.fetchall()
    print(results)

    if results:
        summary_text = "–¢–∞–∫ –∫—Ç–æ, –∫–æ–º—É –∏ —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–µ–Ω?\n\n"

        keyfunc = lambda x: x[0]

        results_sorted = sorted(results, key=keyfunc)

        for debtor, creditor in itertools.groupby(results_sorted, key=keyfunc):

            summary_text += f'üîª @{debtor} —Å–∫–∏–Ω—å:\n'

            order_action = sorted(creditor, key=lambda x: x[2])

            for _, creditor, amount in order_action:
                summary_text += f'    üí∞ @{creditor} {round(amount)}‚ÇΩ\n'

        conn = sqlite3.connect('expenses.db')
        cursor = conn.cursor()

        cursor.execute("""
            SELECT
                SUM(amount) as total_amount
            FROM expenses
            WHERE chat_id = @chat_id
            """, (chat_id,))
        total_amount = cursor.fetchone()

        cursor.execute("""
            SELECT
                AVG(amount) as average_amount
            FROM expenses
            WHERE chat_id = @chat_id
            """, (chat_id,))
        average_amount = cursor.fetchone()

        summary_text += f'\n–ü–æ –∏—Ç–æ–≥—É –≥—É–ª—å–Ω—É–ª–∏ –Ω–∞ {round(total_amount[0])}‚ÇΩ\n–ò–ª–∏ –ø–æ {round(average_amount[0])}‚ÇΩ —Å —á–µ–ª–æ–≤–µ–∫–∞'

    else:
        summary_text = "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤."
    bot.reply_to(message, summary_text)

    conn.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id

    if user_id in user_states:
        state = user_states[user_id]

        if state == 'waiting_for_amount':
            try:
                amount = float(message.text)
                user_states[user_id] = 'waiting_for_description'
                user_states[f'{user_id}_amount'] = amount  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
                bot.reply_to(message, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
            except ValueError:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

        elif state == 'waiting_for_description':
            description = message.text
            amount = user_states.pop(f'{user_id}_amount')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—É–º–º—É
            user_states.pop(user_id)  # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('expenses.db')
            cursor = conn.cursor()
            cursor.execute("INSERT INTO expenses (chat_id, user_id, amount, description) VALUES (?, ?, ?, ?, ?)",
                           (message.chat.id, user_id, message.chat.username, amount, description))
            conn.commit()
            conn.close()

            bot.reply_to(message, f"–†–∞—Å—Ö–æ–¥ {amount} –¥–æ–±–∞–≤–ª–µ–Ω: {description}")
            #TODO: –í—ã–≤–æ–¥–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    bot.polling(none_stop=True)
